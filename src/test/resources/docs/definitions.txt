Виды тестирования по ЦЕЛЯМ:
- функциональное - направлено на проверку того, какие функции ПО реализованы, и того, насколько верно они реализованы:
    - юнит тесты - проверка модуля, компоненты, функции, проводятся разработчиками
    - интеграционное - проверятеся взаимодействие между модулями, компонентами, БД, сервисами
    - системное - проверка работы всей системы заявленным тербование
- нефункциональное - проверка корректности работы нефункциональных требований. Оценивается, КАК программный продукт работает:
    - производительности - как продукт работает под нагрузкой
        - нагрузочное - способность сохранять работоспособность в допустимых пределах нагрузок и с небольшой перегрузкой
        - масштабируемости - работоспособность и производительность при увеличении доступных ресурсво
        - объёмное - производительность под нагрузкой большими данными
        - стрессовое - негтатные изменнения нагрузки значительно превышающие расчетные показатели
        - конкурентное - работа при большом количестве одновременно поступающих запросов, тестирование многопоточности и синхронизации потоков
    - пользовательсвого интерфейса - удобство пользователя при взаимодействии с разными параметрами интерфейса (кнопки, цвета, выравнивание и т. д.)
    - UX - правильность логики использования программного продукта
    - защищенности - насколько безопасно тспользование продукта в отношении доступа к данным и тд
    - инсталляционное - выявление проблем при установке, удалении, обновлении ПО
    - локализации - адаптация продукта к языковому и культурному аспекту
    - совместимости - работоспособность в укащанном окружении

Виды тестирования по СТЕПЕНИ АВТОМАТИЗАЦИИ:
- ручное - без использования доп средств, monkey-testing
- автоматизированное - использование программных средств с написанием кода и тд

Виды тестирования по ПОЗИТИВНОСТИ СЦЕНАРИЯ:
- позитивные - соотвествие ожиданемому поведению, корректность работы программы
- негативные - проверки работоспособности в случае отклонения от ожидаемого поведения, с использованием некоректных данных и операций

Виды тестирования по ДОСТУПУ К КОДУ:
- белого ящика - наличие доступа к коду, как разаботчик
- черного ящика - без доступа к коду, как пользователь
- серого ящика - понимание структуры и взаимодействия компонентов (например с БД и сервисов) без или с ограниченным доступом к коду

Виды тестирования по УРОВНЮ ТЕСТИРОВАНИЯ:
- модульное, юнит тесты - проверка работы конкретной функциональности, компоненты, модуля
- интеграционное - проверятеся взаимодействие между модулями, компонентами, БД, сервисами
- системное - проверка работы приложения целиком
- приемочное - оценка соответствия заявленным требованиям к программному продукту
- регрессионное - набор тест-кейсов, направленных на обнаружение дефектов в уже протестированных участках приложения, необходимый для поиска и исправления ошибок.

Виды тестирования по ИСПОЛНИТЕЛЮ:
- альфа - проводится разработчиками и тестировщиками на ПОЗДНЕЙ стадии разработки
- бета - проводится обычными пользователями непосредственно перед ВЫХОДОМ продукта, для сбора отзывов и внесения правок

Виды тестирования по ФОРМАЛЬНОСТИ:
- тесты - по предварительно написанным тест-кейсам
- исследовательское - одновременная разработка тестов и их исполнение
- свободное - без раразработки тестов и документации, основывается на опыте тестировщика

Виды тестирования по ВАЖНОСТИ:
- дымовое - проверка самой важной функциональности продукта, без которого продукт не может быть выпущен продукта
- критического пути - проверка функциональности, используемой типичными пользователями в повседневной деятельности
- расширенное - проверка всего заявленного функционала

Виды тетсирования по ВХОДНЫМ ДАННЫМ:
- пограничное тестирование:
    - классов эквивалентности - заключается в разбиении всего набора тестов на классы эквивалентности с последующим сокращением числа тестов.
    - граничных значений - выявление специфичных значений на основе калассов эквивалентности
    - доменное - создание тест-кейсов на основе классов эквивалентности и граничных условий, затрагивающих несколько параметров одновременно, для выбора минимального, но достаточного множества
    - попарное (pairwise) - проверка пар значений, вместо всех (частный случай N-комбинационного тестирования)
    - ортогональные массивы - двумерные массивы, где две любые колонки содержат подмассив всевозможных попарных комбинаций исходного массива

----------------------------------
Тест дизайн:
- один из первоначальных этапов тестирования программного обеспечения, этап планирования и проектирования тестов.
- представляет собой продумывание и написание тестовых случаев (test case), в соответствии с требованиями проекта, критериями качества будущего продукта и финальными целями тестирования.

План тестдизайна:
- анализ имеющихся проектных артефактов: документация (спецификации, требования, планы), модели, исполняемый код и т.д.
- написание спецификации по тест дизайну (Test Design Specification)
- проектирование и создание тестовых случаев (Test Cases)

Техники тест дизайна - рекомендации, советы и правила по которым стоит разрабатывать тест для проведения тестирования приложения:
- анализ граничных значений - проверка значениями находящимися на границах классах эквивалентности
    Например, если поле для возраста принимает значения от 18 до 110 лет. Пограничными целыми значениями будут значения, выходящие за интервал и находящиеся непосредственно на границах.
    Для нижнего - это будет 17,18, для верхнего - 110,111 лет.
- разделение на классы эквивалентности - резкое уменьшение количества тестов, за счет разделения на классы и выбора одного значения из класса эквивалентности
    Например, одинаковыми значениями одного класса эквивалентности при применение техники тест дизайна будет: одно значение сегмента букв, одно из цифр.
    Для проверки всего класса эквивалентности будет достаточного любого числа из 18 — 110. и по одному из неверного диапозона - 15, 150
- матрица принятия решений (Cause/Effect - CE) - разделение на возможные варианты действий пользователя и выбор необходимых тестов.
    Для пары логин-пароль можно предположить такую логику:
        Правильный пасс и логин, неправильный пасс и логин, правильный пасс и неправильный логин, неправильный пасс и правильный логин.
        Итого имеем 4 теста.
        Рассмотрев варианты как должно реагировать приложение для каждого из тестов, оставляем только те которые выдают различный результат.
        В идеальном случае у нас остаётся только два теста.
- функциональное тестирование приложения - полная исчерпывающая проверка всей функциональности приложения (Исчерпывающее тестирование)
- тестирование на основе рисков или предугадывание ошибок - основную роль играет опытность инженера, и его интуиция.
- monkey testing
- исследовательское тестирование

----------------------------------
Верификация:
- Отвечает на вопрос правильно ли мы делаем продукт и все ли в соответствии с поставленными требованиями
- В процессе верификации убеждаемся, что функционал нашего продукта работает правильно
- Включает в себя такие вещи, как проверка соответствия требованиям, технической документации и корректности выполнения кода на каждом этапе цикла разработки и тестирования ПО

Валидация:
- Отвечает на вопрос делаем ли мы продукт правильно с точки зрения ожидания потребности пользователей или заказчика от нашего продукта
- В процессе валидации убеждаемся, что функционал нашего приложения соответствует поведению которое ожидает и подразумевает от такого функционала пользователь или заказчик
- В большей степени включает в себя оценку продукта «в общем» и может включать в себя субъективную оценку насколько хорошо работает программа или приложение

Импакт анализ - анализ (оценка риска) влияния изменений на этапе планирования изменений для определения объема будущего регресса

Тест-план - документ, описывающий и регламентирующий перечень работ по тестированию, техники и подходы, стратегию, области отвественности, ресурсы, расписание и ключевые даты.
Тест-кейс - набор входных данных, условий выполнения, ожидаемых результатов
Тест - набор из одного или нескольких тест-кейсов
Чек-лист - набор идей для тест-кейсов, плана тетсирования, разработки, управления
Отчет о дефекте == баг-репорт - описание найденного дефекта с указанием окружения, предусловий, шагов выполнения и результатов, направленный на содействие устранения дефекта
